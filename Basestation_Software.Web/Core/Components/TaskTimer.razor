@inject TaskTimerService _TaskTimerService

<style>
    .scrollable {
        max-height: 50vh; 
        overflow-y: auto;
        display: block;
    }
</style>

<div class="card full-height">
    <div class="card-header d-flex justify-content-between">
        <div class="col">
            <h4>Task Timer</h4>
        </div>
        <div class="col text-end">
            <RadzenDropDown @bind-Value=@value Data=@(Enum.GetValues(typeof(TaskType)))></RadzenDropDown>
        </div>
    </div>
    <div class="card-body scrollable">
        @if (!_dataLoaded)
        {
            <div class="row">
                <div class="spinner-border " role="status"></div>
                <div class="col">
                    <h3>Loading...</h3>
                </div>
            </div>
        }
        else
        {
            
        }
    </div>
</div>


@code
{
    // Declare page member variables.
    private TaskType value = TaskType.Autonomy;

    // Flags.
    private bool _dataLoaded = false;

    protected override void OnInitialized()
    {
        // Create some timers.
    }

    protected override async Task OnInitializedAsync()
    {
        // Loop through the task timer types enum.
        foreach (TaskType TaskType in Enum.GetValues(typeof(TaskType)))
        {
            // Check if a task timer for the current type exists.
            StopwatchTimer? taskTimer = _TaskTimerService.GetStopwatchTimer(TaskType);
            // Check if the timer is null.
            if (taskTimer == null)
            {
                // Create a new timer.
                _TaskTimerService.AddStopwatch(OnStopwatchTick, TaskType);
            }
        }

        // Set data is loaded.
        _dataLoaded = true;
    }

    private async Task OnStopwatchTick(TaskType timerName, TimeSpan timeElapsed)
    {
        // Update member variables.

        // Update the timer.
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {

    }
}
