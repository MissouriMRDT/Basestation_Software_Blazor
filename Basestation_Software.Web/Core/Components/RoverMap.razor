@implements IDisposable
@inject MapTileService _MapTileService
@inject GPSWaypointService _GPSWaypointService
@inject NavigationManager _NavigationManager
@inject IJSRuntime _IJSRuntime

<script>
    // Create global roverMaps collection if it doesn't exist.
    if (window.roverMaps === undefined) { window.roverMaps = {}; }

    // JS interop
    window.roverMaps.@(ID) = {
        lMap: null,
        waypointLayerGroup: null,
        dotNetComponent: null,
        // Create leaflet map.
        init: (dotNetComponent, urlTemplate) => {
            this.dotNetComponent = dotNetComponent;
            this.lMap = L.map("@(ID)", {
                center: [@InitialLat, @InitialLong],
                zoom: @InitialZoomLevel,
                contextmenu: true,
                contextmenuWidth: 140,
                contextmenuItems: [{
                    text: "Add Waypoint",
                    callback: window.roverMaps.@(ID).addWaypoint
                }]
            }).addLayer(L.tileLayer(urlTemplate, {
                attribution: "Basestation_Software.Api",
                maxNativeZoom: 18,
                maxZoom: 21,
            })).addControl(L.control.scale({
                metric: true,
                imperial: false
            }));
            this.lMap.on('zoomend', window.roverMaps.@(ID).onZoomLevelChange);
            this.lMap.on('moveend', window.roverMaps.@(ID).onZoomLevelChange);
            this.waypointLayerGroup = L.layerGroup([]).addTo(this.lMap);
        },
        // Call component.OnZoomLevel.
        onZoomLevelChange: () => {
            let center = this.lMap.getCenter();
            let zoom = this.lMap.getZoom();
            this.dotNetComponent.invokeMethodAsync("OnZoomLevel", center.lat, center.lng, zoom);
        },
        // Call component.AddWaypoint.
        addWaypoint: event => {
            this.dotNetComponent.invokeMethodAsync("AddWaypoint", event.latlng.lat, event.latlng.lng);
        },
        // Create a waypoint marker.
        addWaypointMarker: (lat, lng, radius, color) => {
            if (radius === 0) {
                L.circleMarker([lat, lng], { radius: 20, color: color, dashArray: "15.4 16", fill: false }).addTo(this.waypointLayerGroup);
            } else {
                L.circle([lat, lng], { radius: radius, color: color }).addTo(this.waypointLayerGroup);
            }
        },
        // Clear waypoint markers.
        clearWaypointMarkers: () => {
            this.waypointLayerGroup.clearLayers();
        }
    };
</script>

<style>
    .scrollable {
        max-height: 50vh; 
        overflow-y: auto;
        display: block;
    }
</style>

<div class="card full-height" style="width: 680px">
    <div class="card-header">
        <div class="d-flex justify-content-between align-items-center">
            <h3>Map</h3>
            @if (_cachingMapTiles)
            {
                <div>
                    <h6 class="col">Caching map tiles... (only caches in dev mode)</h6>
                </div>
            }
        </div>
    </div>
    <div class="card-body" style="padding: 0;">
        @if (!_dataLoaded)
        {
            <div class="row">
                <div class="spinner-border " role="status"></div>
                <div class="col">
                    <h3>Loading...</h3>
                </div>
            </div>
        }
        else
        {
            <div id="@ID" style="width: 665px; height: 500px; position: relative;"></div>
        }
    </div>
    <div class="card-footer" id="cursorPosition"></div>
</div>

@code
{
    // Component parameters.
    [Parameter]
    public string ID { get; set; } = "";
    [Parameter]
    public double InitialLat { get; set; } = 40;

    [Parameter]
    public double InitialLong { get; set; } = -100;

    [Parameter]
    public int InitialZoomLevel { get; set; } = 2;

    // Declare page member variables.
    private string jsInteropName;

    // Flags.
    private bool _dataLoaded = false;
    private bool _cachingMapTiles = false;

    protected override void OnInitialized()
    {
        this.jsInteropName = $"window.roverMaps.{ID}";
    }


    protected override async Task OnInitializedAsync()
    {
        // Toggle component is done loading.
        _dataLoaded = true;
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Create leaflet map.
            Uri baseUri = new Uri(_NavigationManager.BaseUri);
            await _IJSRuntime.InvokeVoidAsync($"{jsInteropName}.init", [DotNetObjectReference.Create(this), $"{baseUri.Scheme}://{baseUri.Host}:5000/api/MapTiles/{{z}}/{{y}}/{{x}}.png"]);

            // Plot waypoints and keep them updated.
            await PlotWaypoints();
            _GPSWaypointService.SubscribeToWaypointsChanges(OnWaypointSync);
        }
    }

    private async Task OnWaypointSync()
    {
        // Update waypoint markers.
        await _IJSRuntime.InvokeVoidAsync($"{jsInteropName}.clearWaypointMarkers");
        await PlotWaypoints();
    }

    private async Task PlotWaypoints()
    {
        await Task.WhenAll(_GPSWaypointService.GetGPSWaypoints().ConvertAll<Task>(waypoint =>
        {
            return _IJSRuntime.InvokeVoidAsync($"{jsInteropName}.addWaypointMarker",
        [
            waypoint.Latitude.GetValueOrDefault(0),
            waypoint.Longitude.GetValueOrDefault(0),
            waypoint.SearchRadius.GetValueOrDefault(0),
            ColorTranslator.ToHtml(Color.FromArgb(waypoint.WaypointColor.GetValueOrDefault(0)))
        ]).AsTask();
        }));
    }

    [JSInvokable]
    public async Task AddWaypoint(double lat, double lon)
    {
        await _GPSWaypointService.AddGPSWaypoint(new GPSWaypoint
            {
                ID = -1,
                Name = "",
                Latitude = lat,
                Longitude = lon,
                Altitude = 0,
                WaypointColor = 0,
                SearchRadius = 0,
                Type = WaypointType.Navigation,
            });
    }

    [JSInvokable]
    public async Task OnZoomLevel(double lat, double lon, int zoom)
    {
#if DEBUG
    using (HttpClient client = new HttpClient())
    {
    client.DefaultRequestHeaders.UserAgent.ParseAdd("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36");
    client.DefaultRequestHeaders.Referrer = new Uri("http://mt1.google.com");

    var tasks = new List<Task>();

    // Convert geographic bounds to tile coordinates
    int tileX = LonToTileX(lon, zoom);
    int tileY = LatToTileY(lat, zoom);

    for (int y = (tileY - 3); y < (tileY + 3); y++)
    {
    for (int x = (tileX - 3); x < (tileX + 3); x++)
    {
        MapTile? mapTile = await _MapTileService.GetMapTile(x, y, zoom);
        if (mapTile is null)
        {
            string url = $"http://mt1.google.com/vt/lyrs=y&x={x}&y={y}&z={zoom}";
            tasks.Add(DownloadAndSaveTile(client, url, x, y, zoom));
            _cachingMapTiles = true;
        }
    }
    }

    await Task.WhenAll(tasks);
    _cachingMapTiles = false;
    }
        #endif
    }

    private async Task DownloadAndSaveTile(HttpClient client, string url, int x, int y, int z)
    {
        var response = await client.GetAsync(url);
        try
        {
            response.EnsureSuccessStatusCode();
        }
        catch (HttpRequestException e)
        {
            Console.WriteLine($"An error occurred: {e.Message}");
            return;
        }
        using (var memoryStream = new MemoryStream())
        {
            await response.Content.CopyToAsync(memoryStream);
            byte[] imageBytes = memoryStream.ToArray();
            await _MapTileService.AddMapTile(new MapTile { X = x, Y = y, Z = z, ImageData = imageBytes });
        }
    }

    private int LonToTileX(double lon, int zoom)
    {
        return (int)Math.Floor((lon + 180.0) / 360.0 * Math.Pow(2.0, zoom));
    }

    private int LatToTileY(double lat, int zoom)
    {
        double latRad = lat * Math.PI / 180.0;
        return (int)Math.Floor((1.0 - Math.Log(Math.Tan(latRad) + 1.0 / Math.Cos(latRad)) / Math.PI) / 2.0 * Math.Pow(2.0, zoom));
    }

    void IDisposable.Dispose() { }
}
