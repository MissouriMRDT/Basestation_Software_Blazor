@rendermode InteractiveServer
@inject GPSWaypointService _GPSWaypointService

<style>
    .scrollable {
        max-height: 50vh; 
        overflow-y: auto;
        display: block;
    }
</style>

<div class="card full-height">
    <div class="card-header">
        <h5>Map</h5>
        <h6 class="card-subtitle">View waypoints and rover position.</h6>
    </div>
    <div class="card-body">
        @if (!_dataLoaded)
        {
            <div class="row">
                <div class="spinner-border " role="status"></div>
                <div class="col">
                    <h3>Loading...</h3>
                </div>
            </div>
        }
        else
        {
            <RealTimeMap Parameters="@parameters" height="460px" width="620px"></RealTimeMap>
        }
    </div>
</div>

@code
{
    // Declare page member variables.

    // Flags.
    private bool _dataLoaded = false;

    // Map configuration parameters.
    private RealTimeMap.Basemap basemaps;
    private RealTimeMap.LoadParameters parameters;
    
    protected override void OnInitialized()
    {
        basemaps = new RealTimeMap.Basemap()
        {
            basemap_layers = new List<RealTimeMap.BasemapConfigLayer>
            {
                new RealTimeMap.BasemapConfigLayer()
                {
                    url = "http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",
                    attribution = "Â©Open Street Map",
                    title = "Open Street Map",
                    detect_retina = true
                },
                new RealTimeMap.BasemapConfigLayer()
                {
                    url = "http://localhost:5001/api/MapTiles/{z}/{y}/{x}.png",
                    attribution = "Cached To Basestation_Software.Api",
                    title = "Cached Map Data"
                }
            }
        };
    
        parameters = new RealTimeMap.LoadParameters()
        {
            location = new RealTimeMap.Location()
            {
                latitude = 37.951764,
                longitude = -91.778441,
            },
            zoom_level = 18,
            basemap = basemaps
        };

        // Toggle component is done loading.
        _dataLoaded = true;
    }

    protected override async Task OnInitializedAsync()
    {
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {

    }
}
