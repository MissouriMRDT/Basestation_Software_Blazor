@page "/l/{ConfigID:guid=00000000-0000-0000-0000-000000000001}"

@using Basestation_Software.Models.Config
@using System.Text.Json;
@inherits LayoutComponentBase
@inject IJSRuntime _IJSRuntime
@inject NavigationManager _NavigationManager
@inject ConfigService _ConfigService
@inject NavigationManager UriHelper
@inject CookieService _CookieService

<PageTitle>MRDT Basestation</PageTitle>

<style>
    #layout-grid {
        display: grid;
        grid-template-columns: repeat(@Config_.Columns, 1fr);
        grid-template-rows: repeat(@Config_.Columns, 1fr);
        width: @($"{Config_.Width}vw");
        height: @($"{Config_.Height}vh");
        padding-top: 75px;
    }

    #copy-area {
        position: fixed;
        inset: 10vh 10vw 10vh 10vw;
        z-index: 2000;
        display: grid;
        grid-template-rows: 9fr 1fr;
        grid-template-columns: 1fr 1fr;
    }

    #copy-area button {
        font-size: 5vh;
    }
</style>

<div class="page">
    <link rel="stylesheet" href="_content/Radzen.Blazor/css/@RadzenTheme" />
    <nav class="navbar navbar-expand-sm border-bottom box-shadow mb-3 mat-glass shadow-sm fixed-top" style="padding: 8px 16px">
        <div class="navbar-nav mr-auto">
            <img src="images/swoosh.svg" height="35" />
            @NavLinks
        </div>
        <div class="nav ms-auto me-e justify-content-end">
            <select id="configSelect" @onchange=@((ChangeEventArgs __e) => {if (Guid.TryParse(__e?.Value as string, out Guid guid)) Navigate(guid);})>
                @SelectOptions
            </select>
            <button class="btn btn-sm btn-success" @onclick=SaveConfig title="Save"><i class="bi bi-inline-text bi-save2" /></button>
            <button class="btn btn-sm btn-success" @onclick=NewConfig title="New"><i class="bi bi-inline-text bi-plus-circle" /></button>
            <button class="btn btn-sm btn-success" @onclick=OpenCopyArea title="Import/Export"><i class="bi bi-inline-text bi-download" /><i class="bi bi-inline-text bi-upload" /></button>
            <button class="btn btn-sm btn-danger" @onclick=DeleteConfig title="Delete"><i class="bi bi-inline-text bi-trash" /></button>
            <input class="nav ms-auto me-3 justify-content-end" type="checkbox" name="" id="checkbox" @bind="@IsDarkMode">
        </div>		
        <BlazoredToasts ShowProgressBar="true" Position=Blazored.Toast.Configuration.ToastPosition.TopRight DisableTimeout />
    </nav>
    <div id="layout-grid">
        @CustomRender
    </div>
    @if (CopyAreaVisible)
    {
        <div id="copy-area">
            <InputTextArea @ref="CopyArea" @bind-Value="@CopyAreaValue" style="grid-area: 1 / 1 / 2 / 3"/>
            <button @onclick="ImportConfig" class="btn btn-warning"><i class="bi bi-inline-text bi-upload" /></button>
            <button @onclick="@(_ => CopyAreaVisible = false)" class="btn btn-success"><i class="bi bi-inline-text bi-x-circle" /></button>
        </div>
    }
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    // State
    private RenderFragment? NavLinks { get; set; }
    private RenderFragment? CustomRender { get; set; }
    private RenderFragment? SelectOptions { get; set; }
    private Guid ConfigID;
    private Config Config_ = new Config();
    private InputTextArea? CopyArea;
    private string CopyAreaValue = "";
    private bool CopyAreaVisible = false;
    private string RadzenTheme = "dark-base.css";
    private bool IsDarkMode {
        get => Config_.Dark;
        set
        {
            if (value != Config_.Dark) SetDarkMode(value);
        }
    }

    [CascadingParameter]
    RouteData RouteData_ { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Get ConfigID from url as specified at @page "/l/{ConfigID:guid?}".
        // This workaround depends on <CascadingValue Value="@routeData"> in Routes.razor.
        // All because `[Parameter] ConfigID` wasn't updating ConfigID with the value from the url.
        ConfigID = ((Guid?)RouteData_.RouteValues.GetValueOrDefault("ConfigID", null) ?? ConfigID);

        _ConfigService.SubscribeToConfigChanges(ConfigChanged);
        await _ConfigService.RefreshConfigs(); // We rely on RefreshConfigs calling ConfigChanged.
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Thes funcitons cannot be called from the first time ConfigChanged runs because of prerendering.
            await _IJSRuntime.InvokeVoidAsync("eval", $"document.getElementById(\"configSelect\").value = \"{ConfigID}\";");
            await SetDarkMode(IsDarkMode);
        }
    }

    private async Task Navigate(Guid guid)
    {
        ConfigID = guid;
        _NavigationManager.NavigateTo($"/l/{ConfigID}");
        await _ConfigService.RefreshConfigs(); // We rely on RefreshConfigs awaiting ConfigChanged.
        await _IJSRuntime.InvokeVoidAsync("eval", $"document.getElementById(\"configSelect\").value = \"{ConfigID}\";");
        await SetDarkMode(IsDarkMode); // Shall be called after ConfigChanged.
    }

    private async Task ConfigChanged()
    {
        NavLinks = CreateNavlinks();
        SelectOptions = CreateSelectOptions();

        Config? config = _ConfigService.GetConfig(ConfigID);
        if (config is not null)
        {
            Config_ = config;
            CustomRender = CreateComponents();
        }
        else
        {
            _ToastService.ShowError($"Config with id={ConfigID} not found.");
        }

        await InvokeAsync(StateHasChanged);
    }

    private RenderFragment CreateNavlinks() => builder =>
    {
        builder.OpenRegion(0);

        int i = 0;
        foreach (KeyValuePair<Guid, string> link in Config_.Links)
        {
            builder.OpenElement(i, "a"); // <a>
            builder.AddAttribute(i + 1, "class", "nav-item nav-link bold");
            builder.AddAttribute(i + 2, "href", $"/l/{link.Key}");
            builder.AddContent(i + 3, link.Value);
            builder.CloseElement(); // </a>
            i += 10;
        }
        builder.CloseRegion();
    };

    private RenderFragment CreateSelectOptions() => builder =>
    {
        builder.OpenRegion(0);
        int i = 0;
        foreach (KeyValuePair<Guid, Config> config in _ConfigService.GetConfigs())
        {
            // <option value=config.Key>config.Value.Name</option>
            builder.OpenElement(i, "option");
            builder.AddAttribute(i + 1, "value", config.Key.ToString());
            builder.AddContent(i + 2, config.Value.Name);
            builder.CloseElement();
            i += 10;
        }

        builder.CloseRegion();
    };

    private RenderFragment CreateComponents() => builder =>
    {
        // https://learn.microsoft.com/en-us/aspnet/core/blazor/advanced-scenarios
        // Sequence number i will increase with little change between renders
        builder.OpenRegion(0); // so we can start i at 0
        int i = 0;
        foreach (Component component in Config_.Components)
        {
            Type? componentType = Type.GetType("Basestation_Software.Web.Core.Components." + component.Type);
            if (componentType is null)
            {
                _ToastService.ShowWarning($"Component type {component.Type} not found.");
                continue;
            }

            builder.OpenElement(i, "div"); // <div>
            builder.AddAttribute(i + 1, "style",
                $"grid-area: {component.Y + 1} / {component.X + 1} / span {component.Height} / span {component.Width}; place-self: {component.PlaceSelf}"
            );
            builder.OpenComponent(i + 2, componentType); // <componentType>
            if (component.ID is not null) // Needed for RoverMap, GPS and maybe others
                builder.AddComponentParameter(i + 3, "ID", component.ID);
            builder.CloseComponent(); // </componentType>
            builder.CloseElement(); // </div>
            i += 10;
        }
        builder.CloseRegion();
    };

    private async Task SetDarkMode(bool value)
    {
        Config_.Dark = value;
        RadzenTheme = Config_.Dark ? "dark-base.css" : "default-base.css";
        await _IJSRuntime.InvokeVoidAsync("document.documentElement.setAttribute", ["data-bs-theme", Config_.Dark ? "dark" : "light"]);
        await InvokeAsync(StateHasChanged);
    }

    private async Task SaveConfig() => await _ConfigService.UpdateConfig(ConfigID, Config_);

    private async Task NewConfig()
    {
        Guid? newID = await _ConfigService.AddConfig(Config_);
        if (newID is not null) {
            await Navigate((Guid)newID);
        }
    }

    private async Task DeleteConfig()
    {
        Guid guid = ConfigID;
        ConfigID = new Guid("00000000-0000-0000-0000-000000000001");
        await _ConfigService.DeleteConfig(guid);
        await Navigate(ConfigID);
    }

    private void OpenCopyArea()
    {
        CopyAreaValue = JsonSerializer.Serialize(Config_);
        CopyAreaVisible = true;
    }

    private async Task ImportConfig()
    {
        CopyAreaVisible = false;
        Config_ = JsonSerializer.Deserialize<Config?>(CopyAreaValue) ?? Config_;
        await SaveConfig(); // We rely on UpdateConfig awaiting ConfigChanged.
        await SetDarkMode(IsDarkMode); // Shall be called after ConfigChanged.
    }
}
