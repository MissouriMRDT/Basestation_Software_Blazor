// <auto-generated />
using System;
using Basestation_Software.Api.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Basestation_Software.Api.Migrations
{
    [DbContext(typeof(REDDatabase))]
    [Migration("20241019202236_AddConfig")]
    partial class AddConfig
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.6");

            modelBuilder.Entity("Basestation_Software.Models.Config.ConfigEntity", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Configs");

                    b.HasData(
                        new
                        {
                            ID = new Guid("00000000-0000-0000-0000-000000000001"),
                            Data = "{\"Name\":\"Default\",\"Dark\":true,\"Links\":{},\"Components\":[],\"Columns\":60,\"Rows\":60,\"Width\":100,\"Height\":100}"
                        });
                });

            modelBuilder.Entity("Basestation_Software.Models.Geospatial.GPSWaypoint", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Altitude")
                        .HasColumnType("REAL");

                    b.Property<double?>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double?>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<double?>("SearchRadius")
                        .HasColumnType("REAL");

                    b.Property<DateTime?>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("WaypointColor")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.ToTable("Waypoints");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Altitude = 1280.0,
                            Latitude = 38.405878999999999,
                            Longitude = -110.792207,
                            Name = "MDRS",
                            SearchRadius = 5.0,
                            Timestamp = new DateTime(2024, 10, 19, 15, 22, 35, 922, DateTimeKind.Local).AddTicks(4328),
                            Type = 0,
                            WaypointColor = -16744448
                        },
                        new
                        {
                            ID = 2,
                            Altitude = 315.0,
                            Latitude = 37.951763999999997,
                            Longitude = -91.778441000000001,
                            Name = "SDELC",
                            SearchRadius = 5.0,
                            Timestamp = new DateTime(2024, 10, 19, 15, 22, 35, 922, DateTimeKind.Local).AddTicks(4430),
                            Type = 0,
                            WaypointColor = -65536
                        });
                });

            modelBuilder.Entity("Basestation_Software.Models.Geospatial.MapTile", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("BLOB");

                    b.Property<int?>("X")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Y")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Z")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.ToTable("MapTiles");
                });
#pragma warning restore 612, 618
        }
    }
}
